#include <fstream>
#include <sstream>
#include <cmath>
#include <iomanip>

#include "GRETINA/Gretina.hh"
#include "GRETINA/GretinaHit.hh"
#include "GRETINA/GretinaConf.hh"
#include "GRETINA/Gamma.hh"

namespace Gret {
  Configuration Event::conf;

  void Event::Process(unsigned long long int timestamp, unsigned short int *data, unsigned short int length) {
    crys_intpts crystal;
    if (sizeof(crystal) != length) {
      printf("Severe Error: Inconsistent Gretina Payload length\n");
      return;
    }

    crys_intpts *crys = (crys_intpts*)data;
    AddHit(timestamp, crys);
  }

  void Event::PrintSummary(std::ostream &out) {
    out << "--------- Gretina Summary --------" << std::endl;
    out << "   " << ANSI_COLOR_YELLOW << nValidGretina << ANSI_COLOR_RESET << "/" << ANSI_COLOR_GREEN << nGretina << ANSI_COLOR_RESET
        << " valid Gretina (" << ANSI_COLOR_YELLOW << std::setprecision(4) << (float)nValidGretina/(float)nGretina*100.0 << "%" << ANSI_COLOR_RESET << ")"<< std::endl;
    if (nBadT0 > 0) {
      out << "      " << ANSI_COLOR_YELLOW << nBadT0 << ANSI_COLOR_RESET
          << " bad t0 (" << ANSI_COLOR_YELLOW << std::setprecision(4) << (float)nBadT0/(float)nGretina*100.0 << "%" << ANSI_COLOR_RESET << ")"<< std::endl;
    }
    if (nBadIntE > 0) {
      out << "      " << ANSI_COLOR_RED << nBadIntE << ANSI_COLOR_RESET
          << " bad interaction energy (" << ANSI_COLOR_RED << std::setprecision(4) << (float)nBadIntE/(float)nGretina*100.0 << "%" << ANSI_COLOR_RESET << ")"<< std::endl;
    }
    if (nBadPAD > 0) {
      out << "      " << ANSI_COLOR_RED << nBadPAD << ANSI_COLOR_RESET 
          << " bad PAD (" << ANSI_COLOR_RED << std::setprecision(4) << (float)nBadPAD/(float)nGretina*100.0 << "%" << ANSI_COLOR_RESET << ")"<< std::endl;
    }
    out << "   " << ANSI_COLOR_YELLOW << nTotalGammas << ANSI_COLOR_RESET << " total gammas, " << ANSI_COLOR_GREEN << nEvents << ANSI_COLOR_RESET << " events" << std::endl;
    out <<"  average gamma-ray multiplicity " << ANSI_COLOR_GREEN << (float)nTotalGammas/(float)nEvents << ANSI_COLOR_RESET << std::endl;
  }

  int Event::AddHit(const int64_t GEBtimestamp,
                    const crys_intpts *data) {

    if (nhits == GRETINA_MAXHITS) { std::cerr << "Warning! More than " << nhits << " hits in a single event!" << std::endl; return -1; }
    hits.emplace_back();
    nGretina += 1;
    if (hits[nhits].Build(GEBtimestamp, data) >= 0) {
      if (hits[nhits].valid) {
        nValidGretina += 1;
      }
      if (hits[nhits].BadIntE) {
        nBadIntE += 1;
      }
      if (hits[nhits].BadT0) {
        nBadT0 += 1;
      }
      if (hits[nhits].PAD > 0) {
        nBadPAD += 1;
      }
      nhits += 1;
      return 0;
    }
    nhits += 1;
    return -1;
  }

  int Event::BuildGammas() {    
    int nAddbacks = 0;
    std::vector<int> addbacks(nhits);  
    if (conf.Addback) {
      for (int i=0; i<nhits; ++i) {
        auto hit_i = hits[i];
        if (hit_i.valid == false) { continue; }
        if (conf.AddbackDets[hit_i.CrystalID] == 0) { continue; }
        for (int j=i+1; j<nhits; ++j) {
          auto hit_j = hits[j];
          if (hit_j.valid == false) { continue; }
          if (conf.AddbackDets[hit_j.CrystalID] == 0) { continue; }
          if (addbacks[i] == 0 && addbacks[j] == 0) {
            double costhet = std::sin(hit_i.Theta)*std::sin(hit_j.Theta)*std::cos(hit_i.Phi - hit_j.Phi) + std::cos(hit_i.Theta)*std::cos(hit_j.Theta);
            if (costhet >= std::cos(conf.ClusterAngle*3.14159265/180.0) && costhet <= 1.0) {
              ++nAddbacks;
            
              addbacks[i] = 1;
              addbacks[j] = 1;

              gammas.emplace_back();
              if (hit_i.TotalEnergy > hit_j.TotalEnergy) {
                int inds[2];
                inds[0] = i;
                inds[1] = j;
                gammas[ngammas].Set(hit_i.TotalEnergy + hit_j.TotalEnergy,
                                    2,
                                    &inds[0],
                                    i,
                                    hit_i.Theta,
                                    hit_i.Phi,
                                    hit_i.CrystalID,
                                    hit_i.Time,
                                    hit_i.BadIntE || hit_i.BadT0,
                                    conf.Efficiency(hit_i.TotalEnergy + hit_j.TotalEnergy)
                                    );
              }
              else {
                int inds[2];
                inds[0] = i;
                inds[1] = j;

                gammas[ngammas].Set(hit_i.TotalEnergy + hit_j.TotalEnergy,
                                    2,
                                    &inds[0],
                                    j,
                                    hit_j.Theta,
                                    hit_j.Phi,
                                    hit_j.CrystalID,
                                    hit_j.Time,
                                    hit_j.BadIntE || hit_j.BadT0,
                                    conf.Efficiency(hit_i.TotalEnergy + hit_j.TotalEnergy)
                                    );                
              }
              ngammas +=1;
            }
          }
        }
      }
    }
    for (int i=0; i<nhits; ++i) {
      if (addbacks[i] == 0) {
        auto hit_i = hits[i];
        if (hit_i.valid == false) { continue; }
        int inds[2];
        inds[0] = i;
        gammas.emplace_back();
        gammas[ngammas].Set(hit_i.TotalEnergy,
                            1,
                            &inds[0],
                            i,
                            hit_i.Theta,
                            hit_i.Phi,
                            hit_i.CrystalID,
                            hit_i.Time,
                            hit_i.BadIntE || hit_i.BadT0,
                            conf.Efficiency(hit_i.TotalEnergy)
                            );
        ngammas += 1;
      }
    }

    nTotalGammas += ngammas;
    return nAddbacks; 
  }  
} 
